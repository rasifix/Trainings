////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.50Release
// Tag = $Name: AKW1_500 $
////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit.csv;

import com.garmin.fit.*;

public class RecordCSVWriter implements MesgWithEventListener, RecordMesgListener {
   private CSVWriter csv;

   public RecordCSVWriter(String fileName) {
      csv = new CSVWriter(fileName);
   }

   public void close() {
      csv.close();
   }

   public void onMesg(MesgWithEvent mesg) {
      if (mesg.getTimestamp() != null)
         csv.set("Timestamp", mesg.getTimestamp().toString());

      if (mesg.getEvent() != null) {
         csv.set("Event", mesg.getEvent().toString());
      } else {
         csv.set("Event", "");
      }

      if (mesg.getEventType() != null) {
         csv.set("Event Type", mesg.getEventType().toString());
      } else {
         csv.set("Event Type", "");
      }

      if (mesg.getEventGroup() != null) {
         csv.set("Event Group", mesg.getEventGroup().toString());
      } else {
         csv.set("Event Group", "");
      }

      if (mesg instanceof EventMesg) {
         EventMesg eventMesg = (EventMesg)mesg;
         
         if (eventMesg.getData() != null) {
            switch (eventMesg.getEvent()) {
               case TIMER:
                  csv.set("Event Data", "Trigger: " + eventMesg.getTimerTrigger().toString());
                  break;

               default:
                  csv.set("Event Data", "");
                  break;
            }
         } else {
            csv.set("Event Data", "");
         }
      }

      csv.writeln();
   }

   public void onMesg(RecordMesg mesg) {
      // Clear event.
      csv.set("Event", "");
      csv.set("Event Type", "");
      csv.set("Event Data", "");
      csv.set("Event Group", "");

	  for (int i=0; i<mesg.getNumSpeed1s(); i++) {
	  	csv.set("Timestamp", (new DateTime(mesg.getTimestamp().getTimestamp() - mesg.getNumSpeed1s() + i + 1)).toString());
		csv.set("1s Speed [m/s]", mesg.getSpeed1s(i));
		
		if (i < (mesg.getNumSpeed1s() - 1))
			csv.writeln();
	  }

      if (mesg.getTimestamp() != null)
         csv.set("Timestamp", mesg.getTimestamp().toString());

      if (mesg.getHeartRate() != null)
         csv.set("Heart Rate [bpm]", mesg.getHeartRate().toString());

      if (mesg.getCadence() != null)
         csv.set("Cadence [rpm]", mesg.getCadence().toString());

      if (mesg.getSpeed() != null)
         csv.set("Speed [m/s]", mesg.getSpeed().toString());

      if (mesg.getDistance() != null)
         csv.set("Distance [m]", mesg.getDistance().toString());

      if (mesg.getPower() != null)
         csv.set("Power [watts]", mesg.getPower().toString());
      
      if (mesg.getAccumulatedPower() != null)
         csv.set("Accumulated Power [watts]", mesg.getAccumulatedPower().toString());
      
      if (mesg.getLeftRightBalance() != null)
      {
         csv.set("Left Right Balance [%]", new Integer(mesg.getLeftRightBalance() & LeftRightBalance.MASK).toString());
         csv.set("Is Right Balance", new Boolean((mesg.getLeftRightBalance() & LeftRightBalance.RIGHT) == LeftRightBalance.RIGHT).toString());
      }

      if (mesg.getPositionLat() != null)
         csv.set("Latitude [semicircles]", mesg.getPositionLat().toString());

      if (mesg.getPositionLong() != null)
         csv.set("Longitude [semicircles]", mesg.getPositionLong().toString());

      if (mesg.getAltitude() != null)
         csv.set("Altitude [m]", mesg.getAltitude().toString());

      if (mesg.getGrade() != null)
         csv.set("Grade [%]", mesg.getGrade().toString());

      if (mesg.getResistance() != null)
         csv.set("Resistance", mesg.getResistance().toString());

      if (mesg.getCycleLength() != null)
         csv.set("Cycle Length [m]", mesg.getCycleLength().toString());

      if (mesg.getTemperature() != null)
         csv.set("Temperature [C]", mesg.getTemperature().toString());

      csv.writeln();
   }
}
