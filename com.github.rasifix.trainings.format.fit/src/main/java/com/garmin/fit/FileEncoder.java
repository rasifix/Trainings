////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.50Release
// Tag = $Name: AKW1_500 $
////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.RandomAccessFile;
import java.util.List;

/**
 * Encodes message objects into a FIT binary file.
 * 
 */
public class FileEncoder implements MesgListener, MesgDefinitionListener {
   private File file;
   private FileOutputStream out;
   private MesgDefinition lastMesgDefinition[] = new MesgDefinition[Fit.MAX_LOCAL_MESGS];

   public FileEncoder() {
   }

   public FileEncoder(File file) {
      open(file);
   }

   /**
    * Opens file for writing. If the file already exists it will be overwritten.
    * 
    * @param file
    *           file to write
    */
   public void open(File file) {
         file.delete();
      this.file = file;

      writeFileHeader();
   }

   /**
    * Writes the file header. 
    */
   private void writeFileHeader() {
      if (file == null)
         throw new FitRuntimeException("File not open.");

      try {
         RandomAccessFile raf = new RandomAccessFile(file, "rw");
         long dataSize = file.length() - Fit.FILE_HDR_SIZE;
         if (dataSize < 0)
            dataSize = 0;
         raf.write(Fit.FILE_HDR_SIZE);
         raf.write(Fit.PROTOCOL_VERSION);
         raf.write(Fit.PROFILE_VERSION & 0xFF);
         raf.write(Fit.PROFILE_VERSION >> 8);
         raf.write((int) (dataSize & 0xFF));
         raf.write((int) ((dataSize >> 8) & 0xFF));
         raf.write((int) ((dataSize >> 16) & 0xFF));
         raf.write((int) ((dataSize >> 24) & 0xFF));
         raf.write('.');
         raf.write('F');
         raf.write('I');
         raf.write('T');
         raf.close();
         out = new FileOutputStream(file, true);
      } catch (java.io.IOException e) {
         throw new FitRuntimeException(e);
      }
   }

   /**
    * MesgListener interface. 
    */
   public void onMesg(Mesg mesg) {
      write(mesg);
   }

   /**
    * MesgDefinitionListener interface. 
    */
   public void onMesgDefinition(MesgDefinition mesgDefinition) {
      write(mesgDefinition);
   }
   
   /**
    * Writes a message definition to the file.
    * 
    * @param mesgDefinition
    *           message definition object to write
    */
   public void write(MesgDefinition mesgDefinition) {
      if (file == null)
         throw new FitRuntimeException("File not open.");

      mesgDefinition.write(out);
      lastMesgDefinition[mesgDefinition.localNum] = mesgDefinition;
   }
   
   /**
    * Writes a message to the file.
    * Automatically writes message definition if required.
    * 
    * @param mesg
    *           message object to write
    */
   public void write(Mesg mesg) {
      if (file == null)
         throw new FitRuntimeException("File not open.");

      if ((lastMesgDefinition[mesg.localNum] == null) || !lastMesgDefinition[mesg.localNum].supports(mesg)) {
         write(new MesgDefinition(mesg));
      }
      
      mesg.write(out, lastMesgDefinition[mesg.localNum]);
   }
   
   /**
    * Writes a list of messages to the file.
    * 
    * @param mesgs
    *           list message objects to write
    */
   public void write(List<Mesg> mesgs) {
      for (Mesg mesg : mesgs) {
         write(mesg);
      }
   }

   /**
    * Updates the data size in the file header, writes the CRC, and closes the file.
    */
   public void close() {
      if (file == null)
         throw new FitRuntimeException("File not open.");

      // Set the data size in the file header.
      writeFileHeader();

      try {

         // Compute the CRC.
         FileInputStream in = new FileInputStream(file);
         int crc = 0;
         for (int i = 0; i < file.length(); i++) {
            crc = CRC.get16(crc, (byte) in.read());
         }

         // Write the CRC.
         out.write((int) (crc & 0xFF));
         out.write((int) ((crc >> 8) & 0xFF));

         out.close();
         file = null;
      } catch (java.io.IOException e) {
         throw new FitRuntimeException(e);
      }
   }
}
